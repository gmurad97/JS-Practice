// bracket test js + FIFO or LIFO

// /**
//  * checkBrackets - check Brackets
//  * @param {String} str 
//  */
// function checkBrackets(str) {
// 	if (!str.length)
// 		return true;

// 	brackets = {
// 		"(": ")",
// 		"[": "]",
// 		"{": "}"
// 	};

// 	stack = [];

// 	for (let idx = 0; idx < str.length; idx++) {
// 		const bracket = str[idx];
// 		if (brackets[bracket]) {
// 			stack.push(bracket);
// 		}
// 		else if (Object.values(brackets).includes(bracket)) {
// 			if (stack.length === 0)
// 				return false;
// 			const top = stack.pop();
// 			if (brackets[top] !== bracket) {
// 				return false;
// 			}
// 		}
// 	}
// 	return stack.length === 0;
// }

// console.log(checkBrackets("{{(([}](}}")); // false
// console.log(checkBrackets("(){}[]"));     // true
// console.log(checkBrackets("{[()()][]}")); // true
// console.log(checkBrackets("((()))"));     // true
// console.log(checkBrackets("([)]"));       // false
// console.log(checkBrackets("{[}"));        // false
// =============================================================================

// function retryFetch(url, { retryCount, timeout }) {
// 	let lastError = null;

// 	const fetchTimeout = () =>{
// 		return new Promise((resolve, reject)=>{
// 			const controller = new AbortController();

// 			const timeoutId = setTimeout(()=>{
// 				controller.abort();
// 				reject(new Error("Timeout: fetch aborted!"));
// 			}, timeout);

// 			fetch(url, {signal: controller.signal})
// 			.then((response)=>{
// 				clearTimeout(timeoutId);
// 				if(response.ok){
// 					resolve(response.json());
// 				}
// 				else{
// 					reject(new Error("Fetch then: Non-200 response"));
// 				}
// 			}).catch((error)=>{
// 				clearTimeout(timeoutId);
// 				reject(`Fetch: ${error}`);
// 			})
// 		});
// 	}

// 	const fetchAttempt = (triesLeft) =>{
// 		return fetchTimeout()
// 		.then((response)=>console.log(response))
// 		.catch((error)=>{
// 			lastError = error;
// 			if(triesLeft > 0){
// 				return fetchAttempt(triesLeft - 1)
// 			}
// 			else{
// 				throw Error(lastError);
// 			}
// 		});
// 	}

// 	return fetchAttempt(retryCount);
// }

// console.log(retryFetch(
// 	"https://jsonplaceholder.typicode.com/users",
// 	{ retryCount: 5, timeout: 80 }
// ));

// =============================================================================

// // Mutable - AZN
// let limits = {
// 	500: 1,
// 	200: 1,
// 	100: 1,
// 	50: 0,
// 	20: 5,
// 	10: 3,
// 	5: 2,
// 	1: 1
// };

// function atm(sum, limits) {
// 	let remaining = sum;
// 	const result = Object.entries(limits)
// 		.sort(([a], [b]) => b - a)
// 		.reduce((acc, [nominal, available]) => {
// 			const count = Math.min(Math.floor(remaining / nominal), limits[nominal]);
// 			if (remaining === 0) return acc;
// 			if (count > 0) {
// 				acc[nominal] = count;
// 				remaining -= count * nominal;
// 				limits[nominal] -= count;
// 			}
// 			return acc;
// 		}, {});
// 	if (remaining > 0) {
// 		return "–í –ê–¢–ú –Ω–µ—Ç –¥–µ–Ω–µ–≥...";
// 	} else {
// 		return result;
// 	}
// }

// // console.log(atm(1855, limits));
// // console.log(atm(211,limits));
// console.log(limits)
// console.log(atm(199,limits));
// // console.log(atm(55,limits));
// // console.log(atm(1855, limits));
// // console.log(atm(1855, limits));
// // console.log(limits);
// =============================================================================
// const tickets = [
// 	{ from: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", to: "–ß–µ–ª—è–±–∏–Ω—Å–∫" },
// 	{ from: "–ú–æ—Å–∫–≤–∞", to: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥" },
// 	{ from: "–ü—è—Ç–∏–≥–æ—Ä—Å–∫", to: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä" },
// 	{ from: "–ß–µ–ª—è–±–∏–Ω—Å–∫", to: "–ê—Å—Ç–∞–Ω–∞" },
// 	{ from: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", to: "–ú–æ—Å–∫–≤–∞" },
// ];

// function sortTickets(tickets) {
// 	const tickets_map = new Map();
// 	const destinations = new Set();

// 	for (const ticket of tickets) {
// 		tickets_map.set(ticket.from, ticket.to);
// 		destinations.add(ticket.to);
// 	}

// 	let start = null;
// 	for (const ticket of tickets) {
// 		if (!destinations.has(ticket.from)) {
// 			start = ticket.from;
// 			break;
// 		}
// 	}

// 	let current = start;
// 	const result = [];
// 	while (tickets_map.has(current)) {
// 		const next = tickets_map.get(current);
// 		result.push({ from: current, to: next });
// 		current = next;
// 	}

// 	return result;

// }

// console.log(sortTickets(tickets));

//–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç
//–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - O(n)
// const tickets = [
// 	{ from: "–ü—è—Ç–∏–≥–æ—Ä—Å–∫", to: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä" },
// 	{ from: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", to: "–ú–æ—Å–∫–≤–∞" },
// 	{ from: "–ú–æ—Å–∫–≤–∞", to: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥" },
// 	{ from: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", to: "–ß–µ–ª—è–±–∏–Ω—Å–∫" },
// 	{ from: "–ß–µ–ª—è–±–∏–Ω—Å–∫", to: "–ê—Å—Ç–∞–Ω–∞" },
// ];
// =============================================================================
// 1xx ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (Informational)
// –ö–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ
// 100	Continue
// 101	Switching Protocols
// 102	Processing (WebDAV)
// 103	Early Hints

// 2xx ‚Äî –£—Å–ø–µ—à–Ω—ã–µ (Success)
// –ö–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ
// 200	OK
// 201	Created
// 202	Accepted
// 203	Non-Authoritative Information
// 204	No Content
// 205	Reset Content
// 206	Partial Content
// 207	Multi-Status (WebDAV)
// 208	Already Reported (WebDAV)
// 226	IM Used

// 3xx ‚Äî –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Redirection)
// –ö–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ
// 300	Multiple Choices
// 301	Moved Permanently
// 302	Found
// 303	See Other
// 304	Not Modified
// 305	Use Proxy (Deprecated)
// 306	(Unused)
// 307	Temporary Redirect
// 308	Permanent Redirect

// 4xx ‚Äî –û—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (Client Error)
// –ö–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ
// 400	Bad Request
// 401	Unauthorized
// 402	Payment Required (Reserved)
// 403	Forbidden
// 404	Not Found
// 405	Method Not Allowed
// 406	Not Acceptable
// 407	Proxy Authentication Required
// 408	Request Timeout
// 409	Conflict
// 410	Gone
// 411	Length Required
// 412	Precondition Failed
// 413	Payload Too Large
// 414	URI Too Long
// 415	Unsupported Media Type
// 416	Range Not Satisfiable
// 417	Expectation Failed
// 418	I'm a teapot (RFC 2324)
// 421	Misdirected Request
// 422	Unprocessable Entity (WebDAV)
// 423	Locked (WebDAV)
// 424	Failed Dependency (WebDAV)
// 425	Too Early
// 426	Upgrade Required
// 428	Precondition Required
// 429	Too Many Requests
// 431	Request Header Fields Too Large
// 451	Unavailable For Legal Reasons

// 5xx ‚Äî –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (Server Error)
// –ö–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ
// 500	Internal Server Error
// 501	Not Implemented
// 502	Bad Gateway
// 503	Service Unavailable
// 504	Gateway Timeout
// 505	HTTP Version Not Supported
// 506	Variant Also Negotiates
// 507	Insufficient Storage (WebDAV)
// 508	Loop Detected (WebDAV)
// 510	Not Extended
// 511	Network Authentication Required

// –ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã
// –ö–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ
// 419	Authentication Timeout
// 420	Enhance Your Calm (Twitter)
// 426	Upgrade Required
// 429	Too Many Requests
// 444	No Response (Nginx)
// 449	Retry With (Microsoft)
// 450	Blocked by Windows Parental Controls
// 498	Invalid Token (Esri)
// 499	Client Closed Request (Nginx)
// 509	Bandwidth Limit Exceeded (Apache/cPanel)
// 520	Web Server Returned an Unknown Error (Cloudflare)
// 521	Web Server Is Down (Cloudflare)
// 522	Connection Timed Out (Cloudflare)
// 523	Origin Is Unreachable (Cloudflare)
// 524	A Timeout Occurred (Cloudflare)
// 525	SSL Handshake Failed (Cloudflare)
// 526	Invalid SSL Certificate (Cloudflare)
// 527	Railgun Error (Cloudflare)
// 530	Site is Frozen (Pantheon)

// -REQUEST TYPES
// üåê –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤:
// –ú–µ—Ç–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ
// GET	–ü–æ–ª—É—á–∏—Ç—å	–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è.
// POST	–û—Ç–ø—Ä–∞–≤–∏—Ç—å	–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// PUT	–ó–∞–º–µ–Ω–∏—Ç—å	–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
// PATCH	–ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ	–û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
// DELETE	–£–¥–∞–ª–∏—Ç—å	–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
// HEAD	–ó–∞–≥–æ–ª–æ–≤–∫–∏	–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–∞ –±–µ–∑ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
// OPTIONS	–û–ø—Ü–∏–∏	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–º.
// CONNECT	–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ	–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª—å –∫ —Å–µ—Ä–≤–µ—Ä—É (–æ–±—ã—á–Ω–æ –¥–ª—è HTTPS).
// TRACE	–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

// üåê –ú–µ–Ω–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
// –ú–µ—Ç–æ–¥	–ù–∞–∑–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ
// LINK	–°–≤—è–∑–∞—Ç—å	–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –º–µ–∂–¥—É —Ä–µ—Å—É—Ä—Å–∞–º–∏. (—É—Å—Ç–∞—Ä–µ–ª)
// UNLINK	–†–∞–∑–æ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å	–£–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –º–µ–∂–¥—É —Ä–µ—Å—É—Ä—Å–∞–º–∏. (—É—Å—Ç–∞—Ä–µ–ª)
// PURGE	–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö.
// LOCK	–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (WebDAV)	–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
// UNLOCK	–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (WebDAV)	–°–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å —Ä–µ—Å—É—Ä—Å–∞.
// PROPFIND	–ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤ (WebDAV)	–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–∞.
// VIEW	–ü—Ä–æ—Å–º–æ—Ç—Ä	–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
// COPY	–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (WebDAV)	–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —Ä–µ—Å—É—Ä—Å–∞.
// MOVE	–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å (WebDAV)	–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ.
// MKCOL	–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é (WebDAV)	–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é (–ø–∞–ø–∫—É).
// REPORT	–û—Ç—á–µ—Ç (WebDAV)	–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞.
// SEARCH	–ü–æ–∏—Å–∫ (WebDAV)	–ò—â–µ—Ç —Ä–µ—Å—É—Ä—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
// PATCH	–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ	–ß–∞—Å—Ç–∏—á–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–µ—Å—É—Ä—Å.
// MERGE	–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (WebDAV)	–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ—Å—É—Ä—Å.
// NOTIFY	–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ	–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
// SUBSCRIBE	–ü–æ–¥–ø–∏—Å–∫–∞	–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ WebSocket).
// UNSUBSCRIBE	–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏	–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.