/* Задача 1: Создание простого промиса
Создайте промис, который через 2 секунды разрешается с текстом "Задача 1 выполнена!".

Задача 2: Использование then и catch
Напишите промис, который случайным образом либо отклоняется с ошибкой, либо разрешается с успешным сообщением. Обработайте успешный результат через then, а ошибку — через catch.

Задача 3: Цепочка промисов
Напишите цепочку промисов. Первый промис должен вернуть число 5, второй промис должен умножить это число на 2, а третий промис должен прибавить 10. В конце выведите результат в консоль.

Задача 4: Промис с таймаутом
Создайте промис, который будет отклонен с ошибкой "Время вышло!" через 3 секунды, если действие не было завершено до этого времени.

Задача 5: Promise.all()
У вас есть три промиса. Первый промис разрешается через 1 секунду, второй — через 2 секунды, а третий — через 3 секунды. Используйте Promise.all() для того, чтобы дождаться выполнения всех промисов и вывести массив с их результатами.

Задача 6: Promise.race()
Создайте два промиса: один из которых разрешится через 2 секунды, а второй — через 5 секунд. Используя Promise.race(), выведите результат того промиса, который выполнится первым.

Задача 7: Промис с асинхронной функцией
Напишите асинхронную функцию, которая будет выполнять асинхронный запрос с использованием setTimeout (для имитации задержки), и возвращать результат в виде промиса. Используйте async/await для обработки результата.

Задача 8: Ошибки в цепочке промисов
Создайте цепочку промисов, в которой один из промисов вызывает ошибку. Используйте блок catch, чтобы перехватить ошибку и вывести сообщение "Произошла ошибка в цепочке!".

Эти задачи охватывают основы работы с промисами, а также использование таких методов как then, catch, Promise.all(), Promise.race(), и async/await. */